/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateTesfdaArgs } from "./CreateTesfdaArgs";
import { UpdateTesfdaArgs } from "./UpdateTesfdaArgs";
import { DeleteTesfdaArgs } from "./DeleteTesfdaArgs";
import { TesfdaFindManyArgs } from "./TesfdaFindManyArgs";
import { TesfdaFindUniqueArgs } from "./TesfdaFindUniqueArgs";
import { Tesfda } from "./Tesfda";
import { TesfdaService } from "../tesfda.service";

@graphql.Resolver(() => Tesfda)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TesfdaResolverBase {
  constructor(
    protected readonly service: TesfdaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tesfda",
    action: "read",
    possession: "any",
  })
  async _tesfdasMeta(
    @graphql.Args() args: TesfdaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tesfda])
  @nestAccessControl.UseRoles({
    resource: "Tesfda",
    action: "read",
    possession: "any",
  })
  async tesfdas(@graphql.Args() args: TesfdaFindManyArgs): Promise<Tesfda[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tesfda, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tesfda",
    action: "read",
    possession: "own",
  })
  async tesfda(
    @graphql.Args() args: TesfdaFindUniqueArgs
  ): Promise<Tesfda | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tesfda)
  @nestAccessControl.UseRoles({
    resource: "Tesfda",
    action: "create",
    possession: "any",
  })
  async createTesfda(@graphql.Args() args: CreateTesfdaArgs): Promise<Tesfda> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tesfda)
  @nestAccessControl.UseRoles({
    resource: "Tesfda",
    action: "update",
    possession: "any",
  })
  async updateTesfda(
    @graphql.Args() args: UpdateTesfdaArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Tesfda | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tesfda)
  @nestAccessControl.UseRoles({
    resource: "Tesfda",
    action: "delete",
    possession: "any",
  })
  async deleteTesfda(
    @graphql.Args() args: DeleteTesfdaArgs
  ): Promise<Tesfda | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
